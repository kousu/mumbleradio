#!/usr/bin/env python3
"""
Mumble music bot.

This code is very stupid and basic, but it serves.
"""

# TODO:
# - support arbitrary URLs and audio formats (ffmpeg? pyffmpeg?)
#   - https://github.com/azlux/MumbleRadioPlayer/blob/py3/mumbleRadioPlayer.py -> and yes it uses ffmpeg
#   - also https://github.com/azlux/botamusique -> but this adds a fancy web UI which is great and all
# - accept play requests from the chat
# - clean up tmp keys when done with them
#   - if only openssl didn't need a *file*, but could take something in memory

import pymumble_py3
import wave

import click

import tempfile

def selfsigned(name="mumbleradio"):
    """
    Generate a selfsigned keypair.

    Returns: cert: Path, key: Path
    """

    # https://cryptography.io/en/latest/x509/tutorial/

    # only import these if we're going to use them
    from cryptography import x509
    from cryptography.x509.oid import NameOID
    from cryptography.hazmat.primitives import hashes
    from cryptography.hazmat.backends import default_backend
    from cryptography.hazmat.primitives import serialization
    from cryptography.hazmat.primitives.asymmetric import rsa
    import datetime

    key = rsa.generate_private_key(public_exponent=65537, key_size=2048, backend=default_backend())

    name = x509.Name([
        x509.NameAttribute(NameOID.COMMON_NAME, name)
    ])

    now = datetime.datetime.utcnow()
    cert = (
        x509.CertificateBuilder()
        .subject_name(name)
        .issuer_name(name)
        .public_key(key.public_key())
        .serial_number(x509.random_serial_number())
        .not_valid_before(now)
        .not_valid_after(now + datetime.timedelta(days=10))
        .sign(key, hashes.SHA256(), default_backend())
    )
    cert = cert.public_bytes(encoding=serialization.Encoding.PEM)
    key = key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption(),
    )

    # XXX TOCTOU
    certfile = tempfile.mktemp(".pem", f"{name}-cert")
    keyfile = tempfile.mktemp(".pem", f"{name}-key")
    with open(certfile, "wb") as o: o.write(cert)
    with open(keyfile, "wb") as o: o.write(key)

    return certfile, keyfile


@click.command()
@click.option("--name", default="mumbleradio", help="Bot username")
@click.option("--cert", type=click.Path(), default=None, help='TLS certificate. If not given, an ephemeral one will be generated.')
@click.option("--key", type=click.Path(), default=None, help='TLS key corresponding to the certificate.')
@click.option("--channel", default=None, help="Channel to send to; nest subchannels with '/'. If not given, plays on the whole server")
@click.argument('server')
@click.argument('audiofile', type=click.Path())
def main(name, cert, key, channel, server, audiofile):
    if cert is key is None:
        cert, key = selfsigned(name)
    elif cert is None or key is None:
        raise ValueError("cert and key must be given together or not at all.")

    client = pymumble_py3.Mumble(server, name, certfile=cert, keyfile=key)
    client.set_application_string("mumbleradio")

    # improve the audio quality
    client.set_codec_profile("audio")

    client.start()
    client.is_ready()
    client.set_bandwidth(200000)

    if channel:
        client.channels.find_by_tree(channel.split("/")).move_in()

    # add a small batch of silence to help clients stabilize the new sound before playing
    for i in range(44100//2):
        client.sound_output.add_sound(b"\x00"*4) # why 4? it's the size of a frame. I think.

    with wave.open(audiofile) as w:
        B = 44100*30 # batch size; TODO: tune this
        for i in range(w.getnframes()//B+1):
            client.sound_output.add_sound(w.readframes(B))

    # wait for the audio buffer to drain
    # this is probably not threadsafe
    # https://github.com/azlux/pymumble/issues/64
    import time
    while client.sound_output.pcm: time.sleep(1)

    client.control_socket.close() # XXX todo: use https://github.com/azlux/pymumble/blame/575d77600ebd2595e80e33acea1a17380ec97906/pymumble_py3/mumble.py#L661
    # XXX causes 'ValueError: file descriptor cannot be a negative integer (-1)' in the inner select()
    #client.stop() # better. implemented but not pushed to pypi yet https://github.com/azlux/pymumble/issues/61
    client.join()

if __name__ == '__main__':
    main()

